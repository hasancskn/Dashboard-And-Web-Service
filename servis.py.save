from flask import Flask
import time
from random import *
from flask import jsonify

app = Flask(__name__)


@app.route('/hello_world')
def hello_world():
    return 'Hello World!'

#Real Time için gidecek verilerin % hesaplamalarını yapar
def hesap(a, b=2):
    ret = []
    for i in range(0, b):
        if i == b - 1:
            ret.append(a)
        else:
            f = randint(0, a)
            a = a - f
            ret.append(f)
    return ret
#New vs Returning visitors için oluşturulacak verilerin yanlış sonuç vermesini engeller
def control(c, d):
    v = []
    while (True):
        i = 0
        p=c+d
        if (c < d) & (p!=500000) :
            c = randint(200000, 500000)
            i = i + 1
        else:
            if i != 0:
                d = c - d
                v.append(c)
                v.append(d)
            else:
                v.append(c)
                v.append(d)
            break
    return v
#Revenues için verileri oluşturur
def revenues():
    r=[]
    for i in range(0,12):
        q=randint(5000,40000)
        r.append(q)
    return r
#peak times için verileri oluşturur
def peakt():
    p=[]
    for i in range(0,12):
        q=randint(5000,40000)
        p.append(q)
    return p
@app.route('/get_overview_revenue', methods=['GET'])
#Revenues için verileri gönderir
def revenue():
    r=revenues()
    data = [
        {
            "color": "#393f63",
            "markerSize": 0,
            "type": "splineArea",
            "yValueFormatString": "$###,###.##",
            "dataPoints": [
            	{ "x": 'new Date("1 Jan 2018")', "y": r[0] },
            	{ "x": 'new Date("1 Feb 2018")', "y": r[1] },
            	{ "x": 'new Date("1 Mar 2018")', "y": r[2] },
            	{ "x": 'new Date("1 Apr 2018")', "y": r[3]},
            	{ "x": 'new Date("1 May 2018")', "y": r[4]},
            	{ "x": 'new Date("1 Jun 2018")', "y": r[5]},
            	{ "x": 'new Date("1 Jul 2018")', "y": r[6]},
            	{ "x": 'new Date("1 Aug 2018")', "y": r[7]},
            	{ "x": 'new Date("1 Sep 2018")', "y": r[8]},
            	{ "x": 'new Date("1 Oct 2018")', "y": r[9]},
            	{ "x": 'new Date("1 Nov 2018")', "y": r[10]},
            	{ "x": 'new Date("1 Dec 2018")', "y": r[11]}
            ]
        }
    ]
    res=jsonify(data)
    res.headers.add('Access-Control-Allow-Origin', '*')
    return res

@app.route('/get_overview_peak', methods=['GET'])
#peak times için verileri gönderir
def peak():
    p=peakt()
    data = [
        {
            "color": "#393f63",
            "lineThickness": 3,
            "markerSize": 0,
            "type": "spline",
            "dataPoints": [
            	{ "x": 'new Date("1 Jan 2018")', "y": p[0] },
            	{ "x": 'new Date("1 Feb 2018")', "y": p[1]},
            	{ "x": 'new Date("1 Mar 2018")', "y": p[2] },
            	{ "x": 'new Date("1 Apr 2018")', "y": p[3]},
            	{ "x": 'new Date("1 May 2018")', "y": p[4]},
            	{ "x": 'new Date("1 Jun 2018")', "y": p[5]},
            	{ "x": 'new Date("1 Jul 2018")', "y": p[6]},
            	{ "x": 'new Date("1 Aug 2018")', "y": p[7]},
            	{ "x": 'new Date("1 Sep 2018")', "y": p[8]},
            	{ "x": 'new Date("1 Oct 2018")', "y": p[9]},
            	{ "x": 'new Date("1 Nov 2018")', "y": p[10]},
            	{ "x": 'new Date("1 Dec 2018")', "y": p[11]}
            ]
        }
    ]
    res=jsonify(data)
    res.headers.add('Access-Control-Allow-Origin', '*')
    return res
@app.route('/get_overview', methods=['GET'])
#New ve returning visitors için verileri gönderir
def visit():
    m=[]
    newvisit = randint(200000, 500000)
    retvisit = newvisit - 500000
    if retvisit<=0 :
        retvisit=-1*retvisit
    v = control(newvisit, retvisit) #Gelen verileri kontrol eder

    dataVisitors = {
		"totalVisitors": sum(v),
        "New vs Returning Visitors":
            [
				{
					"cursor": "pointer",
					"explodeOnClick": "false",
					"innerRadius": "75%",
					"legendMarkerType": "square",
					"name": "New vs Returning Visitors",
					"radius": "100%",
					"showInLegend": "true",
					"startAngle": "90",
					"type": "doughnut",
					"dataPoints":[
						{"name": "New Visitors", "y": v[0]},
						{"name": "Returning Visitors", "y": v[1]}
					]
				}
			]
    }
    res=jsonify(dataVisitors)
    res.headers.add('Access-Control-Allow-Origin', '*')
    return res

@app.route('/get_data', methods=['GET'])
#Real Time için veriler gönderir
def send_data():
   #t = int(str(int(time.time()))[-3:])
    device = hesap(t, 2)
    traffic = hesap(t, 2)
    cat = hesap(t, 5)
    stat = hesap(t, 6)

    data = {
        "activeUsers": t,
        "pageViewsPerSecondLowerLimit": randint(0, 1),
        "pageViewsPerSecondUpperLimit": randint(2, 6),

        "device": [
            {"name": "views", "users": device[0]},
            {"name": "Impressions", "users": device[1]},

        ],
        "trafficMedium": [
            {"name": "Male", "users": traffic[0]},
            {"name": "Female", "users": traffic[1]},

        ],
        "categories": [
            {"name": "Happy", "users": cat[0]},
            {"name": "Disgust", "users": cat[1]},
            {"name": "Suprised", "users": cat[2]},
            {"name": "Confused", "users": cat[3]},
            {"name": "Angry", "users": cat[4]}
        ],
        "states": [
            {"name": "0-18", "users": stat[0]},
            {"name": "18-25", "users": stat[1]},
            {"name": "26-35", "users": stat[2]},
            {"name": "36-50", "users": stat[3]},
            {"name": "50-65", "users": stat[4]},
            {"name": "65+", "users": stat[5]},
        ]
    }

    response = jsonify(data)
    response.headers.add('Access-Control-Allow-Origin', '*')
    return response


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
